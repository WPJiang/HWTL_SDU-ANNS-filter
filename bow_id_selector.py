# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bow_id_selector
else:
    import _bow_id_selector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import faiss
class IDSelectorBOW(faiss.IDSelector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nb = property(_bow_id_selector.IDSelectorBOW_nb_get, _bow_id_selector.IDSelectorBOW_nb_set)
    lims = property(_bow_id_selector.IDSelectorBOW_lims_get, _bow_id_selector.IDSelectorBOW_lims_set)
    indices = property(_bow_id_selector.IDSelectorBOW_indices_get, _bow_id_selector.IDSelectorBOW_indices_set)
    w1 = property(_bow_id_selector.IDSelectorBOW_w1_get, _bow_id_selector.IDSelectorBOW_w1_set)
    w2 = property(_bow_id_selector.IDSelectorBOW_w2_get, _bow_id_selector.IDSelectorBOW_w2_set)

    def __init__(self, nb, lims, indices):
        _bow_id_selector.IDSelectorBOW_swiginit(self, _bow_id_selector.new_IDSelectorBOW(nb, lims, indices))

    def set_query_words(self, w1, w2):
        return _bow_id_selector.IDSelectorBOW_set_query_words(self, w1, w2)

    def find_sorted(self, l0, l1, w):
        return _bow_id_selector.IDSelectorBOW_find_sorted(self, l0, l1, w)

    def is_member(self, id):
        return _bow_id_selector.IDSelectorBOW_is_member(self, id)
    __swig_destroy__ = _bow_id_selector.delete_IDSelectorBOW

# Register IDSelectorBOW in _bow_id_selector:
_bow_id_selector.IDSelectorBOW_swigregister(IDSelectorBOW)

class IDSelectorBOWBin(IDSelectorBOW):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id_mask = property(_bow_id_selector.IDSelectorBOWBin_id_mask_get, _bow_id_selector.IDSelectorBOWBin_id_mask_set)

    def __init__(self, nb, lims, indices, id_mask):
        _bow_id_selector.IDSelectorBOWBin_swiginit(self, _bow_id_selector.new_IDSelectorBOWBin(nb, lims, indices, id_mask))
    q_mask = property(_bow_id_selector.IDSelectorBOWBin_q_mask_get, _bow_id_selector.IDSelectorBOWBin_q_mask_set)

    def set_query_words_mask(self, w1, w2, q_mask):
        return _bow_id_selector.IDSelectorBOWBin_set_query_words_mask(self, w1, w2, q_mask)

    def is_member(self, id):
        return _bow_id_selector.IDSelectorBOWBin_is_member(self, id)
    __swig_destroy__ = _bow_id_selector.delete_IDSelectorBOWBin

# Register IDSelectorBOWBin in _bow_id_selector:
_bow_id_selector.IDSelectorBOWBin_swigregister(IDSelectorBOWBin)


def intersect_sorted_c(n1, a1, n2, a2, res):
    return _bow_id_selector.intersect_sorted_c(n1, a1, n2, a2, res)

def intersect_sorted_d(n1, a1, n2, a2, res):
    return _bow_id_selector.intersect_sorted_d(n1, a1, n2, a2, res)
class GFF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    limv = property(_bow_id_selector.GFF_limv_get, _bow_id_selector.GFF_limv_set)
    limt = property(_bow_id_selector.GFF_limt_get, _bow_id_selector.GFF_limt_set)
    indv = property(_bow_id_selector.GFF_indv_get, _bow_id_selector.GFF_indv_set)
    indt = property(_bow_id_selector.GFF_indt_get, _bow_id_selector.GFF_indt_set)
    vecs = property(_bow_id_selector.GFF_vecs_get, _bow_id_selector.GFF_vecs_set)
    nv = property(_bow_id_selector.GFF_nv_get)
    d = property(_bow_id_selector.GFF_d_get)
    nt = property(_bow_id_selector.GFF_nt_get)
    indices = property(_bow_id_selector.GFF_indices_get, _bow_id_selector.GFF_indices_set)
    avg_bin_size = property(_bow_id_selector.GFF_avg_bin_size_get, _bow_id_selector.GFF_avg_bin_size_set)
    mask_of_tag = property(_bow_id_selector.GFF_mask_of_tag_get, _bow_id_selector.GFF_mask_of_tag_set)
    mask_of_vec = property(_bow_id_selector.GFF_mask_of_vec_get, _bow_id_selector.GFF_mask_of_vec_set)

    def __init__(self, nv, d, nt, limv, indv, limt, indt, vecs):
        _bow_id_selector.GFF_swiginit(self, _bow_id_selector.new_GFF(nv, d, nt, limv, indv, limt, indt, vecs))

    def extract_vecs(self, v, tag):
        return _bow_id_selector.GFF_extract_vecs(self, v, tag)

    def extract_masks(self, m, tag):
        return _bow_id_selector.GFF_extract_masks(self, m, tag)
    __swig_destroy__ = _bow_id_selector.delete_GFF

    def build(self):
        return _bow_id_selector.GFF_build(self)

    def set_parallel(self, nt):
        return _bow_id_selector.GFF_set_parallel(self, nt)

    def search(self, nq, queries, k, tags, _D, _I, nprobe, expansion):
        return _bow_id_selector.GFF_search(self, nq, queries, k, tags, _D, _I, nprobe, expansion)

# Register GFF in _bow_id_selector:
_bow_id_selector.GFF_swigregister(GFF)



import numpy as np

# example additional function that converts the passed-in numpy arrays to
# C++ pointers
def intersect_sorted(a1, a2):
    n1, = a1.shape
    n2, = a2.shape
    res = np.empty(n1, dtype=a1.dtype)
    nres = intersect_sorted_c(
        n1, faiss.swig_ptr(a1),
        n2, faiss.swig_ptr(a2),
        faiss.swig_ptr(res)
    )
    return res[:nres]




